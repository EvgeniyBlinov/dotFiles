" ln -s ~/Dropbox/dotFiles/vim/.vimrc .vimrc
" mkdir ~/custom_vim/
"
" $ brew tap macvim-dev/macvim
" $ brew install --HEAD macvim-dev/macvim/macvim --with-properly-linked-python2-python3
" $ brew link macvim

set nocompatible
filetype off

if empty(glob('~/custom_vim/autoload/plug.vim'))
  silent execute "!curl -fLo ~/custom_vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

set runtimepath+=~/custom_vim,~/custom_vim/autoload
set runtimepath+=~/Dropbox/dotFiles/vim/my-snippets

let mapleader = ","

"""""""""SNAPSHOT""""""""""""""""""""""""""""""""""""""""""""""""""""""
" " Generated by vim-plug
" " пятница, 14 декабря 2018 г. 15:47:57
" " :source this file in vim to restore the snapshot
" " or execute: vim -S snapshot.vim
"
" silent! let g:plugs['Dockerfile.vim'].commit = '9380fd1'
" silent! let g:plugs['SQLUtilities'].commit = '5661845'
" silent! let g:plugs['ag.vim'].commit = '4a0dd6e'
" silent! let g:plugs['ale'].commit = '2cfa09e0'
" silent! let g:plugs['auto-pairs'].commit = '9086ce8'
" silent! let g:plugs['cscope.vim'].commit = '7bd52a5'
" silent! let g:plugs['ctrlp.vim'].commit = 'e953ee7'
" silent! let g:plugs['dbext.vim'].commit = '14f3d53'
" silent! let g:plugs['fzf'].commit = '63c42b1'
" silent! let g:plugs['fzf.vim'].commit = 'f0acabf'
" silent! let g:plugs['gounit-vim'].commit = '69ba1af'
" silent! let g:plugs['gruvbox'].commit = 'cb4e7a5'
" silent! let g:plugs['gv.vim'].commit = '3296bbf'
" silent! let g:plugs['happy_hacking.vim'].commit = '9360206'
" silent! let g:plugs['jedi-vim'].commit = '7f4f2db'
" silent! let g:plugs['navajo-night'].commit = '4282027'
" silent! let g:plugs['nerdtree'].commit = '72c3656'
" silent! let g:plugs['nginx.vim'].commit = '152bbb2'
" silent! let g:plugs['papercolor-theme'].commit = '5bd7d5b'
" silent! let g:plugs['parsec.vim'].commit = '28428e8'
" silent! let g:plugs['python-syntax'].commit = '69760cb'
" silent! let g:plugs['rainbow'].commit = 'd7bb89e'
" silent! let g:plugs['splitjoin.vim'].commit = '13cf529'
" silent! let g:plugs['sudo.vim'].commit = '060f025'
" silent! let g:plugs['tComment'].commit = 'e9ee1ca'
" silent! let g:plugs['tabular'].commit = '00e1e7f'
" silent! let g:plugs['tagbar'].commit = 'e777dbb'
" silent! let g:plugs['targets.vim'].commit = '4a5e9c0'
" silent! let g:plugs['ultisnips'].commit = '6fdc364'
" silent! let g:plugs['vim'].commit = '17f8eeb'
" silent! let g:plugs['vim-abolish'].commit = 'b95463a'
" silent! let g:plugs['vim-action-ag'].commit = '79be54f'
" silent! let g:plugs['vim-better-whitespace'].commit = '70a38fa'
" silent! let g:plugs['vim-easy-align'].commit = '1cd724d'
" silent! let g:plugs['vim-easymotion'].commit = '1a0244c'
" silent! let g:plugs['vim-enmasse'].commit = 'c2286f1'
" silent! let g:plugs['vim-expand-region'].commit = '9665135'
" silent! let g:plugs['vim-fugitive'].commit = '2564c37'
" silent! let g:plugs['vim-indent-object'].commit = '5c5b24c'
" silent! let g:plugs['vim-javascript'].commit = '2d515b1'
" silent! let g:plugs['vim-jsbeautify'].commit = '5c0be85'
" silent! let g:plugs['vim-json'].commit = '3727f08'
" silent! let g:plugs['vim-monokai'].commit = '6eb56b4'
" silent! let g:plugs['vim-move'].commit = '91c0f98'
" silent! let g:plugs['vim-python-pep8-indent'].commit = '22cdb82'
" silent! let g:plugs['vim-qf'].commit = '4026bbc'
" silent! let g:plugs['vim-repeat'].commit = '43d2678'
" silent! let g:plugs['vim-rooter'].commit = 'd5bb76e'
" silent! let g:plugs['vim-signature'].commit = '6bc3dd1'
" silent! let g:plugs['vim-signify'].commit = 'ea87e05'
" silent! let g:plugs['vim-sleuth'].commit = '7a104e3'
" silent! let g:plugs['vim-snippets'].commit = 'eef99a8'
" silent! let g:plugs['vim-surround'].commit = '5970688'
" silent! let g:plugs['vim-textobj-python'].commit = '585c76d'
" silent! let g:plugs['vim-textobj-user'].commit = '074ce25'
" silent! let g:plugs['vim-visual-star-search'].commit = '3725972'
"
" PlugUpdate!
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


call plug#begin('~/custom_vim/plugged')
" Plug 'joonty/vdebug'
" Plug 'vim-scripts/mru.vim'
"
" colorscheme's ----------------
"
" Plug 'skielbasa/vim-material-monokai'
" Plug 'tpope/vim-sensible'
" Plug 'smurfd/winterd'
" Plug 'vim-scripts/solarized'
" Plug 'whatyouhide/vim-gotham'

Plug 'NLKNguyen/papercolor-theme'
Plug 'morhetz/gruvbox'
Plug 'vim-scripts/navajo-night'
Plug 'sickill/vim-monokai'
Plug 'challenger-deep-theme/vim'
Plug 'keith/parsec.vim'
Plug 'YorickPeterse/happy_hacking.vim'
Plug 'tomasiser/vim-code-dark'
Plug 'ajmwagar/vim-deus'
Plug 'chase/focuspoint-vim'
Plug 'vim-scripts/xoria256.vim'
Plug 'cseelus/vim-colors-lucid'
Plug 'arcticicestudio/nord-vim'
Plug 'joshdick/onedark.vim'
Plug 'fcpg/vim-orbital'
Plug 'sts10/vim-pink-moon'
Plug 'AlessandroYorba/Sierra'
Plug 'lifepillar/vim-solarized8'
Plug 'liuchengxu/space-vim-dark'
Plug 'jacoborus/tender.vim'
Plug 'rakr/vim-two-firewatch'
" ------------------------------
" Plug 'mhinz/vim-startify'
"
"
" жуткое гавно никогда больше не ставь
" Plug 'thaerkh/vim-workspace'
"
" ]` [` - прыгать вправо вверх вниз
Plug 'kshenoy/vim-signature'
"
"
" Plug 'fisadev/vim-isort'  { 'dir': '~/', 'do': 'pip install isort' }  "
" биндит ctrl-i todo: придумай норм биндинг
"
Plug 'airblade/vim-rooter'
Plug 'vim-scripts/nginx.vim'
Plug 'vim-scripts/sudo.vim'

" Plug 'Konfekt/FastFold'
" Plug 'tmhedberg/simpylfold'

" Plug 'kien/rainbow_parentheses.vim'

Plug 'ekalinin/Dockerfile.vim'
Plug 'elzr/vim-json'
Plug 'hdima/python-syntax'


Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb' " required by fugitive to :Gbrowse

Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/tagbar'
Plug 'vim-scripts/dbext.vim'

Plug 'tpope/vim-surround'

Plug 'vim-scripts/vim-javascript'
Plug 'vim-scripts/vim-jsbeautify'
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Plug 'ervandew/supertab'

Plug 'easymotion/vim-easymotion'
" Plug 'epeli/slimux'
Plug 'vim-scripts/tComment'
Plug 'ctrlpvim/ctrlp.vim'


" Plug 'Raimondi/delimitMate'
" Plug 'wmvanvliet/vim-ipython'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'ntpeters/vim-better-whitespace'
" Plug 'takac/vim-hardtime'
" Plug 'matze/vim-move'
Plug 'junegunn/gv.vim'
" Plug 'wincent/ferret'
" Plug '907th/vim-auto-save'

" Plug 'vim-scripts/Align'
" Plug 'vim-scripts/Align'
Plug 'junegunn/vim-easy-align'
Plug 'vim-scripts/SQLUtilities'

" Plug 'vim-syntastic/syntastic'
Plug 'w0rp/ale'

" Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries',  'commit': 'c2fa1a1'}
Plug 'fatih/vim-go', {'do': ':GoInstallBinaries'}

" GoUnit!!!!!!
Plug 'hexdigest/gounit-vim'
Plug 'AndrewRadev/splitjoin.vim'

Plug 'vim-scripts/cscope.vim'
" Plug 'mileszs/ack.vim'
" Plug 'tpope/vim-scriptease'
Plug 'romainl/vim-qf'

"--------------------------------------------------------------------------------------------------------------
" Key Mapping       Description
" <count>ai         (A)n (I)ndentation level and line above.
" <count>ii         (I)nner (I)ndentation level (no line above).
" <count>aI         (A)n (I)ndentation level and lines above/below.
" <count>iI         (I)nner (I)ndentation level (no lines above/below).
" Therefore:
"
"     Press vii to select all the lines of common indentation
"     Press vai to select all the lines of common indentation and additionally the line which 'initializes' it
Plug 'michaeljsmith/vim-indent-object'
"--------------------------------------------------------------------------------------------------------------

" TURN OFF cos maybe produce lag on macos
"
" Plug 'shougo/neocomplete.vim'
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'
Plug 'jiangmiao/auto-pairs'

" unused
" Plug 'ryanss/vim-hackernews'

" Want to turn fooBar into foo_bar? Press crs (coerce to snake_case).
" MixedCase (crm), camelCase (crc), snake_case (crs), UPPER_CASE (cru),
" dash-case (cr-), dot.case (cr.), space case (cr<space>), and Title Case (crt)
" are all just 3 keystrokes away. These commands support repeat.vim.
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
Plug 'terryma/vim-expand-region'
Plug 'godlygeek/tabular'
Plug 'wellle/targets.vim'

" Plug 'xolox/vim-session'
" Plug 'xolox/vim-misc'

" Plug 'luisjure/csound-vim'

"""""""" Installation
""""""""     gem install sonic-pi-cli
"""""""" Usage
""""""""     Sonic Pi must be running, as this is just a client.
"""""""" sonic_pi play 50
"""""""" sonic_pi sample :loop_breakbeat, rate: 0.5
"""""""" sonic_pi stop
" Plug 'dermusikman/sonicpi.vim', {'do': 'gem install sonic-pi-cli'}

Plug 'rking/ag.vim'
Plug 'Chun-Yang/vim-action-ag'


Plug 'nelstrom/vim-visual-star-search'
Plug 'Olical/vim-enmasse'

" Plug 'python-mode/python-mode', { 'branch': 'develop' }
"
Plug 'kana/vim-textobj-user'
Plug 'bps/vim-textobj-python'
"
"
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

Plug 'davidhalter/jedi-vim'
" Plug 'tpope/vim-sleuth'

Plug 'AndrewRadev/splitjoin.vim'
" Plug 'luochen1990/rainbow'
"
Plug 'pandysong/ghost-text.vim'

Plug 'farmergreg/vim-lastplace'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'tell-k/vim-autoflake'
Plug 'AndrewRadev/undoquit.vim'

" Plug 'tpope/vim-dadbod'
" CTRL-N !
" Plug 'terryma/vim-multiple-cursors'
"
Plug 'ternjs/tern_for_vim', {'do': 'npm install'}
Plug 'maksimr/vim-jsbeautify'
call plug#end()

"""DEBUG""""""""""""""""""""
" set verbosefile=/tmp/vim_verbose.log
" set verbose=9
"""""""""""""""""""""""""""""""
" SPEED UP MAC OS !!!!!!!!!!!!!11
" ➜   Proxy git:(feature/REDB-198) defaults write -g InitialKeyRepeat -int 10
" ➜   Proxy git:(feature/REDB-198) defaults write -g KeyRepeat -int 1
"
" defaults write com.apple.dock workspaces-auto-swoosh -bool NO
" killall Dock
"
" let loaded_matchparen = 1
let g:matchparen_timeout = 10
let g:matchparen_insert_timeout = 10

filetype plugin indent on
syntax on


fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

augroup main_autocmd
    autocmd!
    autocmd FileType cpp highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    autocmd FileType cpp match OverLength /\(\%81v.\+\)\|\( \+$\)/
    autocmd FileType c highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    autocmd FileType c match OverLength /\(\%81v.\+\)\|\( \+$\)/
    autocmd FileType python highlight OverLength ctermbg=red ctermfg=white guibg=#592929
    autocmd FileType python match OverLength /\(\%81v.\+\)\|\( \+$\)/
    autocmd FileType yaml setlocal tabstop=2 expandtab shiftwidth=2 softtabstop=2
    autocmd FileType vim map <buffer> <leader>rr :source %<CR>

    autocmd BufWritePre *.py :call TrimWhitespace()
augroup END


ca tn tabnew
ca pl py3 py_lib()
" ca os OpenSession
" ca ss SaveSession


let g:move_key_modifier = '<M-3>'


set nobackup
set nowb
set noswapfile
set smarttab
" set backspace=indent,eol,start	" Allow backspace in insert mode

set cryptmethod=blowfish2
" :W sudo saves the file
" (useful for handling the permission-denied error)
" command W w !sudo tee % > /dev/null

set laststatus=2
" в мак осе ломает yy
"
if has('gui_macvim')
    set macmeta
endif

set modelines=0
set ttyfast
set ruler
" Why is this not a default
set hidden
" At least let yourself know what mode you're in
set showmode
" Enable enhanced command-line completion. Presumes you have compiled
" with +wildmenu.  See :help 'wildmenu'
set wildmenu
set wildmode=list:longest
" These commands open folds
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo,hor
" Set the search scan to wrap around the file
set wrapscan
" Make command line two lines high
" set ch=2
set ch=1
" set visual bell -- I hate that damned beeping
set novb
" Allow backspacing over indent, eol, and the start of an insert
set backspace=2
" The GUI (i.e. the 'g' in 'gvim') is fantastic, but let's not be
" silly about it :)  The GUI is fantastic, but it's fantastic for
" its fonts and its colours, not for its toolbar and its menus -
" those just steal screen real estate
set guioptions=ac
set guioptions+=M
set guioptions-=T
set guioptions-=r
set guioptions-=m

" set guifont=DejaVu\ Sans\ Mono\ 10
" set guifont=Liberation\ Mono\ 9.5
" set guifont=Monospace\ 10
" set guifont=Liberation\ Mono\ 10
if has('gui_macvim')
    set guioptions-=a
    " set guifont=Monaco:h12
    " set guifont=Sarasa\ Mono\ SC:h12
    " set guifont=Menlo:h12
    " set guifont=Source\ Code\ Pro\ ExtraLight:h13
    " set guifont=Source\ Code\ Pro\ ExtraLight:h13
    " set guifont=Source\ Code\ Pro\ ExtraLight:h12
    "
    "
    "
    "
    set nomacligatures
    " set guifont=Fira\ Code:h12
    " set guifont=Source\ Code\ Pro:h12
    set guifont=Monoid-Regular:h12
else
    set guifont=Ubuntu\ Mono\ 11
endif


" Hide the mouse pointer while typing
set mousehide
" When the page starts to scroll, keep the cursor 8 lines from
" the top and 8 lines from the bottom
set scrolloff=15
" Allow the cursor to go in to "invalid" places
set virtualedit=all
" Tabstops are 4 spaces
set tabstop=4
set shiftwidth=4
" set the search scan to wrap lines
set wrapscan
" set the search scan so that it ignores case when the search is all lower
" case but recognizes uppercase if it's specified
set ignorecase
set smartcase
" When completing by tag, show the whole tag, not just the function name
set showfulltag
" Turn tabs into spaces
set expandtab
" Incrementally match the search
set incsearch
set hlsearch
set showcmd " показывать незавершенные команды в статусбаре (автодополнение ввода)
set matchpairs+=<:> " показывать совпадающие скобки для HTML-тегов
set confirm " использовать диалоги вместо сообщений об ошибках

set nowrap
set nu

" set relativenumber
set norelativenumber
" set cursorline
set nocursorline
"

" Don't update the display while executing macros
set lazyredraw


set cindent
set cino=M1(0,W4

" При вставке фрагмента сохраняет отступы
set pastetoggle=
"НАСТРОЙКИ СВОРАЧИВАНИЯ БЛОКОВ КОДА (фолдинг)
set foldenable " включить фолдинг
setlocal nofoldenable
set foldmethod=syntax " определять блоки на основе синтаксиса файла
" set foldmethod=indent
" set foldcolumn=0 " показать полосу для управления сворачиванием
" set foldlevel=99 " что бы по умолчанию всё были раскрыты
set foldlevel=0 " что бы по умолчанию всё были скрыты
"
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount-5) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=MyFoldText()

" If you like the convenience of having Vim define folds automatically by
" indent level, but would also like to create folds manually,
" you can get both by putting this in your vimrc:
"
" z-f -make manual fold z-d delete fold
" augroup vimrc
"   " ломает фолд подумай как исправить
"   au BufReadPre * setlocal foldmethod=syntax
"   au BufWinEnter * if &fdm == 'syntax' | setlocal foldmethod=manual | endif
"   au BufWinEnter * setlocal foldmethod=manual
" augroup END

"" Разворачивать окно редактора на весь экран
if has('gui')
"" set guioptions-=T " отключить меню в GUI
    au GUIEnter * :set lines=60 columns=120
endif

" что бы нормально отображался man
if has("gui_running")
  runtime ftplugin/man.vim
  nmap K :Man <cword><CR>
endif

syntax enable
if has('gui_running')
    set background=dark
    " colorscheme PaperColor
    " colorscheme material-monokai
    " colorscheme gruvbox
    colorscheme deus
    hi Search guibg=Yellow guifg=Black
else
    " colorscheme elflord
    " colorscheme darkblue
    colorscheme xoria256
endif

set encoding=utf-8
set wcm=<Tab>

menu Encoding.UTF-8    :e ++enc=utf-8<CR>
menu Encoding.CP1251   :e ++enc=cp1251<CR>
menu Encoding.CP866    :e ++enc=cp866<CR>
menu Encoding.KOI8-U   :e ++enc=koi8-u<CR>
map <F8> :emenu Encoding.<TAB>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug autoflake
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:autoflake_remove_all_unused_imports=1
let g:autoflake_remove_unused_variables=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug deoplete
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:deoplete#enable_at_startup = 1

call deoplete#custom#option({
\ 'auto_complete_delay': 0,
\ 'camel_case': v:true,
\ 'smart_case': v:true,
\ 'deoplete-filter-matcher_full_fuzzy': v:true,
\ 'min_pattern_length': 1,
\ })

let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
\]

set completeopt=longest,menuone,preview
let g:deoplete#sources = {}
let g:deoplete#sources['javascript.jsx'] = ['file', 'ultisnips', 'ternjs']
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

" call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy', 'matcher_length'])
"
" call deoplete#custom#source('omni',          'mark', '<omni>')
" call deoplete#custom#source('flow',          'mark', '<flow>')
" call deoplete#custom#source('padawan',       'mark', '<php>')
" call deoplete#custom#source('tern',          'mark', '<tern>')
" call deoplete#custom#source('go',            'mark', '<go>')
" call deoplete#custom#source('jedi',          'mark', '<jedi>')
" call deoplete#custom#source('vim',           'mark', '<vim>')
" call deoplete#custom#source('neosnippet',    'mark', '<snip>')
" call deoplete#custom#source('tag',           'mark', '<tag>')
" call deoplete#custom#source('around',        'mark', '<around>')
" call deoplete#custom#source('buffer',        'mark', '<buf>')
" call deoplete#custom#source('tmux-complete', 'mark', '<tmux>')
" call deoplete#custom#source('syntax',        'mark', '<syntax>')
" call deoplete#custom#source('member',        'mark', '<member>')
" "
" call deoplete#custom#source('around',        'rank', 670)
" call deoplete#custom#source('go',            'rank', 650)
" call deoplete#custom#source('jedi',          'rank', 645)
" call deoplete#custom#source('vim',           'rank', 645)
" call deoplete#custom#source('flow',          'rank', 630)
" call deoplete#custom#source('TernJS',        'rank', 620)
" call deoplete#custom#source('omni',          'rank', 600)
" call deoplete#custom#source('neosnippet',    'rank', 510)
" call deoplete#custom#source('member',        'rank', 500)
" call deoplete#custom#source('file_include',  'rank', 420)
" call deoplete#custom#source('file',          'rank', 410)
" call deoplete#custom#source('tag',           'rank', 400)
" call deoplete#custom#source('buffer',        'rank', 320)
" call deoplete#custom#source('dictionary',    'rank', 310)
" call deoplete#custom#source('tmux-complete', 'rank', 300)
" call deoplete#custom#source('syntax',        'rank', 200)
" call deoplete#custom#source('padawan',       'rank', 100)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug w0rp/ale
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax Checker
" let g:ale_fix_on_save = 1
let g:ale_fixers = { 'python': ['autopep8', 'isort', 'yapf', 'remove_trailing_lines', 'trim_whitespace'], 'go': ['remove_trailing_lines', 'trim_whitespace'] }
let g:ale_fixers['html'] = ['remove_trailing_lines', 'trim_whitespace', 'tidy', 'prettier']
let g:ale_python_autopep8_options = '--aggressive'
augroup filetype_py
  autocmd FileType python map <buffer> <F9> :call Autoflake()<CR>
  autocmd FileType python map <buffer> <F10> :ALEFix<CR>
augroup END
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: tcomment
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call tcomment#DefineType('python',           '# %s'             )
call tcomment#DefineType('gdb',           '# %s'             )

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: fugitive
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nnoremap <F5> :Gblame<cr>
nnoremap 5 :Gblame<cr>

" Plug: python-syntax
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let python_highlight_all = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: jedi
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" не работает с 3 питоном на маке (((
if has('gui_macvim')
    " let g:jedi#force_py_version = 2
    let g:jedi#force_py_version = 3
endif

"  let g:jedi#auto_initialization = 1

" let g:jedi#popup_on_dot = 1
"
" let g:jedi#use_tabs_not_buffers = 1
" let g:jedi#use_tabs_not_buffers = 0
let g:jedi#goto_command = "\'g"
let g:jedi#goto_assignments_command = "\'d"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
" let g:jedi#usages_command = ""

" let g:jedi#completions_command = "<C-Space>"
" let g:jedi#rename_command = ""
" nnoremap <F4> :call setreg('"', line('.'))<CR> :tabnew %<CR> :<C-r>"<CR>
" noremap ms :redraw!<CR>:let w:cccc=col('.')<CR>:let w:llll=line('.')<CR>:w<CR>:wa<CR>:call cursor(w:llll, w:cccc)<CR>

" let g:jedi#completions_command = "<C-n>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" completions option
" :help cpt
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set cpt=.,w,b,u,t


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: NerdTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeIgnore=['\~$', '\.pyc$', ]
let g:NERDTreeMinimalUI = 1
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeWinSize=50
" nnoremap <F2> :NERDTreeToggle<cr>
nnoremap 2 :NERDTreeToggle<cr>
" nmap <leader><leader>f :NERDTreeFind<CR>
nmap mf :NERDTreeFind<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: CtrlP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<Leader>p'
" nmap <Leader>b :CtrlPBuffer<CR>
" nmap <Leader>p :CtrlP<CR>
nmap <Leader><Leader>m :CtrlPMRUFiles<CR>
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
let g:ctrlp_working_path_mode = 'w'
let g:ctrlp_root_markers = ['WORK_ADCOMBO', 'mor', 'mavostrykh', 'SBER', 'SBER_STUFF']
" подумай как go поступить
let g:ctrlp_use_caching = 1
let g:ctrlp_by_filename = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: junegunn/fzf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" command! -bang MyFzf call fzf#run(fzf#wrap('lalala', {'dir': '~/SBER', 'options': '--query "!^venv_ .py$ "'}, <bang>0))
command! -bang MyFzf call fzf#run(fzf#wrap('lalala', {'dir': '~/GOPATH/src', 'options': '--query ".go$ "'}, <bang>0))
nnoremap <leader>zz :MyFzf<CR>

nmap <Leader>b :Buffers<CR>

nmap <leader><leader>l :Lines<CR>
" nmap <leader>s<leader> :Snippets<CR>
" nmap <leader><leader>s :Snippets<CR>
inoremap sn <esc>:Snippets<CR>
nnoremap sn :Snippets<CR>
nmap sl :BLines<CR>
nmap <Leader>t :Tags<CR>

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: EasyMotion
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" map <Leader><Leader> <Plug>(easymotion-prefix)
" map <c-m> <Plug>(easymotion-prefix)
map s <Plug>(easymotion-prefix)
map <leader><leader> <Plug>(easymotion-prefix)

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
" let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
let g:EasyMotion_keys = 'asdfgwerthjkluiovcm'
let g:EasyMotion_do_shade = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: Tagbar
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nnoremap <F3> :TagbarToggle<CR>
nnoremap 3 :TagbarToggle<CR>
let g:tagbar_usearrows = 1


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: Slimux
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" nmap <leader><leader>r :w<CR> :SlimuxSendKeysLast<CR>


" nmap <leader>r<leader> :w<CR> :SlimuxSendKeysLast<CR>
" imap <M-9> <C-\><C-o>:w<CR><C-\><C-o>:SlimuxSendKeysLast<CR>
" nmap <M-9> :w<CR>:SlimuxSendKeysLast<cr>
"
" imap <F6> <C-\><C-o>:w<CR><C-\><C-o>:SlimuxSendKeysLast<CR>
" nmap <F6> :w<CR>:SlimuxSendKeysLast<cr>
"
" " imap <leader><leader>r <ESC>:w<CR> :SlimuxSendKeysLast<CR> :startinsert<CR>
" map <leader>kk :SlimuxSendKeysPrompt<CR>
" nmap <leader>cc :SlimuxSendKeysConfigure<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: HardTime
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:hardtime_default_on = 0
let g:hardtime_allow_different_key = 1
let g:hardtime_maxcount = 3


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: IPython
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ipython_run_flags = ['-i']
map  <buffer> <silent> <C-Return>        <Plug>(IPython-RunFile)
map  <buffer> <silent> <M-S>             <Plug>(IPython-RunLineAsTopLevel)

" ctrl - shift - s
xmap <buffer> <silent> <M-S>             <Plug>(IPython-RunLines)

" cell это когда ###
" map  <buffer> <silent> <Leader><Leader>x <Plug>(IPython-RunCell)
map  <buffer> <silent> <Leader>x <Plug>(IPython-RunCell)


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: Neocomplete
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" :NeocompleteEnable
" let g:neocomplete#enable_at_startup = 0
"
" let g:neocomplete#force_overwrite_completefunc      = 1
" let g:neocomplete#enable_smart_case                 = 1
" let g:neocomplete#auto_completion_start_length      = 0
" let g:neocomplete#sources#syntax#min_keyword_length = 0


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: vim-go
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:go_bin_path = expand("~/.gotools")
let g:go_fmt_command = "goimports"
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1

"DONT WORK !!!!!!!!!!!!!!!!!!!!!!!!!!!!! for gopls
let g:go_gocode_unimported_packages = 1
" let g:go_gocode_propose_source = 0

let g:go_fmt_experimental = 1

" let g:go_fold_enable = ['block', 'import', 'varconst', 'package_comment', 'comment']
let g:go_fold_enable = ['block']

" let g:go_debug_address = '127.0.0.1:8181'
" let g:go_debug_address = '127.0.0.1:40000'

" let g:go_def_mode='godef'
let g:go_def_mode='gopls'

" slow down autocompletion but work
" let g:go_gocode_propose_source=1

" hmmmmmm may be
" let g:go_gocode_propose_source=0
" autocmd BufWritePost *.go silent! :GoBuild -i

" let g:go_metalinter_autosave = 1
" let g:go_metalinter_autosave_enabled = ['vet', 'golint']
" let g:go_metalinter_autosave_enabled = ['vet']
"
"
" autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

augroup filetype_go
    autocmd!
    autocmd FileType go map <buffer> 'g <Plug>(go-def-tab)
    autocmd FileType go nmap <Leader><leader>a :GoAlternate<CR>
    autocmd FileType go nmap <Leader><leader>d :GoDeclsDir<CR>
    autocmd FileType go nmap <Leader><leader>r :GoReferrers<CR>
    autocmd FileType go nmap <Leader><leader>n :GoRename<CR>
    autocmd FileType go nmap <Leader><leader>i :GoImplements<CR>
    " autocmd FileType go nmap <Leader><leader>e :GoWhicherrs<CR>
    autocmd FileType go nnoremap <leader>e :GoIfErr<CR>
    autocmd FileType go nmap <Leader><leader>c :GoChannelPeers<CR>
    " autocmd FileType go nmap <F9> :GoMetaLinter<CR>
    " for speed up autocomplete
    autocmd FileType go nmap <F9> :GoBuild -i <CR>
    autocmd FileType go nmap <F8> :GoImpl 
augroup END



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" let g:UltiSnipsJumpForwardTrigger="<a-b>"
" let g:UltiSnipsJumpForwardTrigger="<a-g>"
" let g:UltiSnipsJumpBackwardTrigger="<a-f>"
" let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsExpandTrigger="<c-k>"
" let g:UltiSnipsJumpForwardTrigger="<c-m>"   " or Enter
let g:UltiSnipsJumpForwardTrigger="<c-k>"   " or Enter
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsJumpBackwardTrigger="<c-m>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" let g:UltiSnipsUsePythonVersion = 3
" let g:UltiSnipsUsePythonVersion = 2

" let g:UltiSnipsSnippetDirectories=["UltiSnips", 'gosnippets/Ultisnips', '~/Dropbox/dotFiles/vim/snippets']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: dbext
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:dbext_default_pgsql_bin                = 'psql'
let g:dbext_default_pgsql_cmd_header         = ''
let g:dbext_default_pgsql_cmd_terminator     = ''
let g:dbext_default_pgsql_cmd_options        = ''
let g:dbext_default_pgsql_extra              = ''
let g:dbext_default_pgsql_pgpass             = expand('$home/.pgpass')
let g:dbext_default_buffer_lines = 15
source ~/Dropbox/dotFiles/vim/vimrc_dbext.vim

" Plug: auto-pairs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:AutoPairsMapCh = 0
" let g:AutoPairsShortcutJump = '<M-n>'
" let g:AutoPairsShortcutJump = ''

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plug: vim-workspace
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ToggleWorkspace - создает удаляет воркспейс
let g:workspace_autosave_always = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" plug: vim-qf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ack.vim-inspired mappings available only in location/quickfix windows:
"
"     s - open entry in a new horizontal window
"     v - open entry in a new vertical window
"     t - open entry in a new tab
"     o - open entry and come back
"     O - open entry and close the location/quickfix window
"     p - open entry in a preview window
let g:qf_mapping_ack_style = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cluisjure/csound-vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:csound_manual = "http://www.csounds.com/manual/"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" dermusikman/sonicpi.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:sonicpi_keymaps_enabled = 0
" nnoremap <M-r> :SonicPiSendBuffer<CR>
" nnoremap <M-s> :SonicPiStop<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug: rking/ag.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 " use * to search current word in normal mode
nmap # <Plug>AgActionWord
" use * to search selected text in visual mode
vmap # <Plug>AgActionVisual
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug vim-scripts/cscope.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:cscope_silent = 1
" nnoremap <leader>fa :call cscope#findInteractive(expand('<cword>'))<CR>
" nnoremap <leader>l :call ToggleLocationList()<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug 'junegunn/vim-easy-align'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug 'AndrewRadev/undoquit.vim'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:undoquit_mapping = 'X'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plug 'maksimr/vim-jsbeautify'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for json
autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
" for jsx
autocmd FileType jsx noremap <buffer> <c-f> :call JsxBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" python
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source ~/Dropbox/dotFiles/vim/vimrc_python.vim

" if has("python3")
"     map <a-y> :py3 EvaluateCurrentRange()
" endif
"
" if has("python")
"     map <a-y> :py EvaluateCurrentRange()
" endif

com! FormatJSON %!python -m json.tool

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" maps
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"quick save
" noremap ms :redraw!<CR>:let w:cccc=col('.')<CR>:let w:llll=line('.')<CR>:w<CR>:wa<CR>:call cursor(w:llll, w:cccc)<CR>
" noremap ms :w<CR>:wa<CR>zz
noremap ms :w<CR>zz
" noremap ms :w<CR>


"- clipboard ---------------------------------------------
noremap <c-c> "+y
noremap <leader><c-v> "+p


" yank to clipboard
set clipboard=unnamed " copy to the system clipboard
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif
"---------------------------------------------------------

inoremap <c-j> <esc>l
vnoremap <c-j> <esc>

" inoremap <c-[> <nop>
" vnoremap jk <esc>
" vnoremap <c-[> <nop>
" inoremap <c-[> <nop>
"
" nnoremap <c-h> 5h
" nnoremap <c-j> 5j
" nnoremap <c-k> 5k
" nnoremap <c-l> 5l

" vnoremap <c-h> 5h
" vnoremap <c-j> 5j
" vnoremap <c-k> 5k
" vnoremap <c-l> 5l

nnoremap j gj
nnoremap k gk

" inoremap <C-BS> <C-W>
" imap <a-l> <Right>
" imap <a-h> <Left>
inoremap <c-l> <Right>
" imap <c-h> <Backspace>
" imap <c-h> <Left>
" imap <a-j> <Down>
" imap <a-k> <Down>

" nnoremap <c-n> :tabnext<cr>
" nnoremap <c-p> :tabprev<cr>
" vnoremap <c-n> :tabnext<cr>
" vnoremap <c-p> :tabprev<cr>

" nnoremap <M-7> :tabprev<cr>
" inoremap <M-7> <C-o>:tabprev<cr>
" vnoremap <M-7> :tabprev<cr>
" nnoremap <M-9> :tabnext<cr>
" inoremap <M-9> <C-o>:tabnext<cr>
" vnoremap <M-9> :tabnext<cr>


" alt-u alt-o
nnoremap <M-u> :tabprev<cr>
inoremap <M-u> <C-o>:tabprev<cr>
vnoremap <M-u> :tabprev<cr>
nnoremap <M-o> :tabnext<cr>
inoremap <M-o> <C-o>:tabnext<cr>
vnoremap <M-o> :tabnext<cr>


" nnoremap <leader>a :execute "normal! /)\<cr>$T)a__)\<cr>"
" nnoremap <leader>a :execute "normal! xmp/)\n$lllllT)i)"<cr>:normal! `p<cr>
" nnoremap <leader>x :execute "normal! xmp/)\n$lllllT)i)"<cr>:normal! `p<cr>:nohls<cr>

" Use Ctrl+Space to do omnicompletion:
if has("gui_running")
    inoremap <C-Space> <C-x><C-o>
else
    inoremap <Nul> <C-x><C-o>
endif

nmap <leader><leader>f :set foldmethod=manual<CR>
nmap <leader>f<leader> :set foldmethod=syntax<CR>

nnoremap <c-y> viwy
nnoremap si *Nzzcgn
nnoremap s; ^v$hd"add
nnoremap s' x$p
" nnoremap <F4> :let g:prev_window_column_cccc=col('.')<CR>:let g:prev_window_line_llll=line('.')<CR>:call setreg('"', line('.'))<CR> :tabnew %<CR> :<C-r>"<CR>:call cursor(g:prev_window_line_llll, g:prev_window_column_cccc)<CR>
nnoremap so :let g:prev_window_column_cccc=col('.')<CR>:let g:prev_window_line_llll=line('.')<CR>:call setreg('"', line('.'))<CR> :tabnew %<CR> :<C-r>"<CR>:call cursor(g:prev_window_line_llll, g:prev_window_column_cccc)<CR>

" TODO: create better binding
" nnoremap 9 :tab terminal make _test<CR>
nnoremap 9 :make<CR>

" nnoremap sk ciw

" выделение с помощью easymotion
nmap vj Vsj
nmap vk Vsk


"" Vmap for maintain Visual Mode after shifting > and <
" vmap < <gv
" vmap > >gv
"
"" Move visual block
" vnoremap J :m '>+1<CR>gv=gv
" vnoremap K :m '<-2<CR>gv=gv

"" Open current line on GitHub
" nnoremap <Leader>g :.Gbrowse<CR>


function! DeleteInactiveBufs()
    "From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    "Below originally inspired by Hara Krishna Dara and Keith Roberts
    "http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
        "bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! Bdi :call DeleteInactiveBufs()
